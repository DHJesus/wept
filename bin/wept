#!/usr/bin/env node
'use strict';
const fs = require('fs');
const path = require('path');
const yargs = require('yargs');
const chalk = require('chalk');
const logs = require('../lib/logs');

const clearConsole = () => {
  process.stdout.write(/^win/.test(process.platform) ? '\x1B[2J\x1B[0f' : '\x1B[2J\x1B[3J\x1B[H');
}

const checkCompileProject = (compiledPath) => {
  if (!compiledPath) throw new Error('小程序编译后项目路径不能为空');
  if (!path.isAbsolute(compiledPath)) throw new Error('小程序编译后项目路径必须为绝对路径');
  const parent = path.dirname(compiledPath);
  try {
    fs.accessSync(parent, fs.constants.R_OK | fs.constants.W_OK);
  } catch (err) {
    throw new Error(`小程序编译后项目读写权限缺失 [${compiledPath}]`);
  }
};

const checkAppletProject = (projectPath) => {
  if (!projectPath) throw new Error('不存在此小程序项目');
  if (!path.isAbsolute(projectPath)) throw new Error('小程序项目路径应为绝对路径');
  if (!fs.existsSync(projectPath)) throw new Error(`指定小程序项目${projectPath} 不存在`);

  let appJsonPath = path.resolve(projectPath, 'app.json');
  if (!fs.existsSync(appJsonPath)) throw new Error(`小程序项目 [${appJsonPath}] 不存在app.json文件`);

  let appJsPath = path.resolve(projectPath, 'app.js');
  if (!fs.existsSync(appJsPath)) throw new Error(`小程序项目 [${appJsonPath}] 不存在app.js文件`);
};

const runWeb = async () => {
  let appletSources = path.resolve(process.cwd());
  checkAppletProject(appletSources);

  const cacheFolder = path.resolve(__dirname, '..', 'appletProjectCache');
  if (!fs.existsSync(cacheFolder)) {
    fs.mkdirSync(cacheFolder, { recursive: true });
  }

  let compiledPath = path.resolve(cacheFolder, path.basename(appletSources));
  checkCompileProject(compiledPath);

  
};

const weptCli = async () => {
  clearConsole()
  yargs.usage('Usage: $0 <command> [options]')
    .command('web', '在浏览器中运行小程序应用', (yargs) => {
      return yargs
        .usage('')
    }, async (args) => {
      // TODO 
      // 实现打包在浏览器环境中运行
      await runWeb();
    })
    .command('ios', '在IOS环境中运行小程序应用', (yargs) => {
      return yargs
        .usage('')
    }, async (args) => {
      // TODO 
      // 实现打包在ios环境中运行
    })
    .demandCommand(1, chalk.red('[ERROR]: 需执行一项wept web或wept ios 命令'))
    .parse();
};

weptCli().catch(err => {
  logs.error(err)
  process.exit();
});
